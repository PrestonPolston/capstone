// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String?
  price       Float?
  image       String?
  description String?
  class       String?
  quantity    Int        @default(0)
  wishlists   Wishlist[]
  Review      Review[]
  Order       Order[]    @relation("ProductOrder")
}

model Order {
  id          Int       @id @default(autoincrement())
  user        Users?    @relation(fields: [userId], references: [id])
  userId      Int?
  products    Product[] @relation("ProductOrder")
  quantity    Int
  totalPrice  Float
  orderNumber String    @unique
  createdAt   DateTime  @default(now())
}

model Users {
  id                Int              @id @default(autoincrement())
  username          String?          @unique
  password          String?
  firstName         String?
  lastName          String?
  email             String?
  admin             Boolean          @default(false)
  preferences       UserPreferences?
  userInformation   UserInformation?
  tokens            Token[]
  wishlists         Wishlist[]
  userPreferencesId Int              @default(-1)
  Review            Review[]
  Order             Order[]
}

model UserInformation {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  address    String?
  state      String?
  city       String?
  postalCode String?
  country    String?

  user Users @relation(fields: [userId], references: [id])
}

model UserPreferences {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  profilePic     String?
  primaryColor   String?
  secondaryColor String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           Users    @relation(fields: [userId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      Users   @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  user      Users   @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
}

model Token {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  valid      Boolean  @default(true)
  expiration DateTime
  token      String
  user       Users?   @relation(fields: [userId], references: [id])
  userId     Int
}
